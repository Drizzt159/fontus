/*jslint node:true, vars:true, bitwise:true, unparam:true */
/*jshint unused:false */
/*
* Copyright (c) 2015 - 2016 Intel Corporation.
*
* Permission is hereby granted, free of charge, to any person obtaining
* a copy of this software and associated documentation files (the
* "Software"), to deal in the Software without restriction, including
* without limitation the rights to use, copy, modify, merge, publish,
* distribute, sublicense, and/or sell copies of the Software, and to
* permit persons to whom the Software is furnished to do so, subject to
* the following conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

"use strict";

var exports = module.exports = {};

// The program is using the `mraa` module
// to communicate directly with the digital
// pin used to turn on/off the water pump
var mraa = require("mraa");

// devices
var moisture, flow, pump;

// pins
var moisturePin = 0,
    flowPin = 8,
    pumpPin = 7;

// Initialize the Grove hardware devices
exports.init = function(config) {
  if (config.platform === "firmata") {
    // open connection to firmata
    mraa.addSubplatform(mraa.GENERIC_FIRMATA, "/dev/ttyACM0");

    moisturePin += 512;
    flowPin += 512;
    pumpPin += 512;
  }

  moisture = new (require("jsupm_grovemoisture").GroveMoisture)(moisturePin);
  flow = new (require("jsupm_grovewfs").GroveWFS)(flowPin);
  pump = new mraa.Gpio(pumpPin);

  // Set GPIO direction to output
  pump.dir(mraa.DIR_OUT);
};

// The program handles events generated by the various connected
// hardware devices using the Node.js built-in `events` module
var events = new (require("events").EventEmitter)();
exports.events = events;

// Check that water is flowing
exports.checkFlowOn = function() {
  flow.clearFlowCounter();
  flow.startFlowCounter();

  setTimeout(function() {
    if (flow.flowRate() < 1) { events.emit("alert"); }
  }, 2000);
};

exports.startFlow = function() {
  flow.clearFlowCounter();
  flow.startFlowCounter();
}

exports.stopFlow = function() {
  flow.stopFlowCounter();
  flow.clearFlowCounter();
}

exports.getFlowCount = function() {
    return flow.flowCounter();
}

exports.getFlowRate = function() {
    return flow.flowRate();
}

exports.getMillis = function() {
    return flow.getMillis();
}

// Check that water isn't flowing
exports.checkFlowOff = function() {
  flow.clearFlowCounter();
  flow.startFlowCounter();

  setTimeout(function() {
    if (flow.flowRate() >= 0.5) { events.emit("alert"); }
  }, 2000);
};

// Turns on the water
exports.turnOn = function() {
  var that = this;
  pump.write(1);

  // check flow started after 10 seconds
  setTimeout(that.checkFlowOn, 10000);
};

// Turns off the water
exports.turnOff = function() {
  var that = this;
  pump.write(0);

  // check flow stopped after 10 seconds
  setTimeout(that.checkFlowOff, 10000);
};

// current moisture sensor reading
exports.moistureValue = function() {
  return moisture.value();
};
